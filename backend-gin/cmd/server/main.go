package main

import (
	"backend-gin/internal/config"
	"backend-gin/internal/database"
	"backend-gin/internal/handlers"
	"backend-gin/internal/models"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

func main() {
	// Load Configuration
	cfg, err := config.LoadConfig()
	if err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
	}

	// Initialize Database
	if err := database.InitDB(cfg); err != nil {
		log.Fatalf("Failed to initialize database: %v", err)
	}
	log.Println("Database initialized successfully.")

	// Run Database Migrations
	log.Println("Running database migrations...")
	err = database.DB.AutoMigrate(
		&models.Role{},
		&models.Doctor{},
		&models.Patient{},
		&models.Action{},
		&models.Stage{},
		&models.StepsInfo{},
		&models.VideoPath{},
	)
	if err != nil {
		log.Fatalf("Failed to migrate database: %v", err)
	}
	log.Println("Database migrations completed successfully.")

	// Startup Logic
	// Create Video Directories
	videoDirs := []string{
		cfg.VideoDir + "/original",
		cfg.VideoDir + "/flipped",
		cfg.VideoDir + "/inference",
	}
	for _, dir := range videoDirs {
		if _, err := os.Stat(dir); os.IsNotExist(err) {
			log.Printf("Creating directory: %s", dir)
			if err := os.MkdirAll(dir, 0755); err != nil {
				log.Fatalf("Failed to create directory %s: %v", dir, err)
			}
		}
	}

	// Create Default Admin Role
	var adminRole models.Role
	err = database.DB.Where("role_name = ?", "admin").First(&adminRole).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			log.Println("Admin role not found, creating one...")
			newAdminRole := models.Role{
				RoleName: "admin",
				RoleDesc: "Administrator role with full access",
				// ID will be auto-generated by GORM
			}
			if err := database.DB.Create(&newAdminRole).Error; err != nil {
				log.Fatalf("Failed to create admin role: %v", err)
			}
			log.Println("Admin role created successfully.")
		} else {
			log.Fatalf("Error checking for admin role: %v", err)
		}
	} else {
		log.Println("Admin role already exists.")
	}

	// Setup Gin Router
	router := gin.Default()

	// Setup CORS Middleware
	router.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"*"}, // Adjust for production
		AllowMethods:     []string{"GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Content-Type", "Accept", "Authorization"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}))

	// Register API Routes
	apiV1 := router.Group("/api/v1")

	// Patient routes
	patientRoutes := apiV1.Group("/patients")
	{
		// Based on FastAPI, /patient_login was POST
		patientRoutes.POST("/patient_login", handlers.PatientLogin)
		// Based on FastAPI, /insert_patient was PUT
		patientRoutes.PUT("/insert_patient", handlers.InsertPatient)
		// Based on FastAPI, /get_all_patient_by_doctor_id was GET with path param
		patientRoutes.GET("/get_all_patient_by_doctor_id/:doctor_id", handlers.GetAllPatientsByDoctorID)
		// Based on FastAPI, /update_patient_by_id was PUT
		patientRoutes.PUT("/update_patient_by_id", handlers.UpdatePatientByID)
		// Based on FastAPI, /delete_patient_by_id was DELETE with path params
		patientRoutes.DELETE("/delete_patient_by_id/:patient_id/:doctor_id", handlers.DeletePatientByID)
		// Based on FastAPI, /get_patients_with_page was GET
		patientRoutes.GET("/get_patients_with_page", handlers.GetPatientsWithPage)
	}

	// Simple root/health check endpoint
	router.GET("/", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"message": fmt.Sprintf("Server is running on port %s", cfg.ListenPort)})
	})

	// Start Server
	log.Printf("Starting server on port %s", cfg.ListenPort)
	if err := router.Run(":" + cfg.ListenPort); err != nil {
		log.Fatalf("Failed to run server: %v", err)
	}
}
